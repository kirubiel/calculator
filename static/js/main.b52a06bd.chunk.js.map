{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","displayValue","setDisplayValue","preDisplayValue","setPreDisplayValue","operandEntered","setOperandEntered","bracketOpened","setBracketOpened","calculatedBool","setCalculatedBool","calculation","setDisplay","value","toString","indexOf","concat","setPreDisplay","slice","calculate","calculated","math","focusRef","useRef","useEffect","current","focus","className","tabIndex","autoFocus","ref","onBlur","target","onKeyDown","e","key","isNaN","whatKey","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAsJeA,MAlJf,WACE,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CF,mBAAS,MAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4CJ,oBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAA4CR,oBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KAEIC,EAAcR,EAEZS,EAAa,SAAAC,GACjB,OAAoB,IAAjBZ,GAAgC,IAAVY,EACV,MAAVA,OACDX,EAAgBD,EAAaa,WAAaD,QAG5CX,EAAgBW,GAEE,IAAVA,GAAgC,IAAjBZ,EAEdI,EACI,MAAVQ,GACDX,EAAgB,IAAD,OAAKW,SACpBP,GAAkB,KAGpBJ,EAAgBW,QAChBP,GAAkB,SAEVL,EAAaa,WAAWC,QAAQ,MAAQ,GAAe,MAAVF,GAKrDX,EAAgBD,EAAaa,WAAWE,OAAOH,UAhB1C,GAoBT,SAASI,EAAeJ,GACtB,GAAIR,EAkBF,MAhBa,MAAVQ,EACgC,MAA9BV,EAAgBe,OAAO,IACa,MAAlCf,EAAgBe,OAAO,GAAI,IAC5Bd,EAAmBD,EAAgBe,MAAM,GAAI,GAAKL,GAClDL,GAAiB,IAKnBJ,EAAmBD,EAAgBe,MAAM,GAAI,GAAKL,IAGpDT,EAAmBD,EAAkB,IAAMU,GAC3CL,GAAiB,SAEnBF,GAAkB,GAEVG,GACRL,EAAmBH,EAAaa,WAAaD,GAC7CH,GAAkB,IAElBN,EAD4B,OAApBD,EACWA,EAAgBW,WAAab,EAAaa,WAAaD,EAEvDZ,EAAaa,WAAaD,GAE/CP,GAAkB,GAGpB,IAAMa,EAAY,WAChB,IAAIC,EAAa,KACdb,GACDa,EAAaC,IAAcV,EAAYK,OAAOf,EAAe,MAC7DO,GAAiB,IAEjBY,EAAaC,IAAcV,EAAcV,GAG3CC,EAAgBkB,GAChBhB,EAAmBgB,EAAWN,YAC9BJ,GAAkB,IAIdY,EAAWC,mBAuBjB,OArBAC,qBAAU,WACRF,EAASG,QAAQC,WAqBjB,sBAAKC,UAAU,aAAaC,SAAS,IACnCC,WAAW,EAAMC,IAAKR,EACtBS,OAAQ,qBAAGC,OAAoBN,SAC/BO,UAAW,SAAAC,GAAC,OArBhB,SAAiBA,GACf,IAAMrB,EAAQqB,EAAEC,IAChB,GAAIC,MAAMvB,IAAoB,MAAVA,EAEb,GAAa,MAAVA,GAA2B,MAAVA,GAA2B,MAAVA,GAA2B,MAAVA,EAC3DI,EAAcJ,QACT,GAAa,UAAVA,GAA+B,MAAVA,EAC7BM,QACK,IAAa,WAAVN,EAKR,OAJAX,EAAgB,GAChBI,GAAkB,GAClBF,EAAmB,WARnBQ,EAAWC,GAkBKwB,CAAQH,IAH1B,UAIE,sBAAKP,UAAU,WAAf,UACE,qBAAKW,GAAG,aAAR,SAAsBnC,IACtB,qBAAKmC,GAAG,UAAR,SAAmBrC,OAGrB,sBAAK0B,UAAU,mBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBAAQY,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,QAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,QAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,OAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,OAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,OAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,MAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,MAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,MAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,QAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,IAAI0B,GAAG,OAAzC,eACA,wBAAQC,QAAS,kBAAM3B,EAAW,MAAM0B,GAAG,UAA3C,kBAEF,sBAAKX,UAAU,WAAf,UACE,wBAAQY,QAAS,WACfrC,EAAgB,GAChBI,GAAkB,GAClBF,EAAmB,OAAQkC,GAAG,QAHhC,gBAIA,wBAAQC,QAAS,kBAAMtB,EAAc,MAAMqB,GAAG,WAA9C,eACA,wBAAQC,QAAS,kBAAMtB,EAAc,MAAMqB,GAAG,SAA9C,eACA,wBAAQC,QAAS,kBAAMtB,EAAc,MAAMqB,GAAG,MAA9C,eACA,wBAAQC,QAAS,kBAAMtB,EAAc,MAAMqB,GAAG,WAA9C,eACA,wBAAQC,QAAS,kBAAMpB,KAAamB,GAAG,SAAvC,yBCnIKE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b52a06bd.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react'\r\nimport * as math from 'mathjs'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [displayValue, setDisplayValue] = useState(0)\r\n  const [preDisplayValue, setPreDisplayValue] = useState(null)\r\n  const [operandEntered, setOperandEntered] = useState(false)\r\n  const [bracketOpened, setBracketOpened] = useState(false)\r\n  const [calculatedBool, setCalculatedBool] = useState(false)\r\n\r\n  let calculation = preDisplayValue\r\n\r\n  const setDisplay = value => {\r\n    if(displayValue === 0 && value !== 0) {\r\n      if(value === \".\") {\r\n        setDisplayValue(displayValue.toString() + value)\r\n        return\r\n      }\r\n      setDisplayValue(value)\r\n      return\r\n    } else if(value === 0 && displayValue === 0) {\r\n      return\r\n    } else if (operandEntered) {\r\n      if(value === \".\") {\r\n        setDisplayValue(`0${value}`)\r\n        setOperandEntered(false)\r\n        return\r\n      }\r\n      setDisplayValue(value)\r\n      setOperandEntered(false)\r\n      return\r\n    } else if(displayValue.toString().indexOf(\".\") > -1 && value === \".\") {\r\n      return\r\n    }\r\n    else\r\n    {\r\n      setDisplayValue(displayValue.toString().concat(value))\r\n    }\r\n  }\r\n\r\n  function setPreDisplay (value) {\r\n    if (operandEntered) {\r\n      // To change the operand that appears last on #predisplay\r\n      if(value !== \"-\") {\r\n        if(preDisplayValue.slice(-1) === \"-\") {\r\n          if(preDisplayValue.slice(-2, -1) === \"(\") {\r\n            setPreDisplayValue(preDisplayValue.slice(0, -3) + value)\r\n            setBracketOpened(false)\r\n          } else {\r\n            setPreDisplayValue(preDisplayValue.slice(0, -1) + value)\r\n          }\r\n        } else {\r\n          setPreDisplayValue(preDisplayValue.slice(0, -1) + value)\r\n        }\r\n      } else {\r\n        setPreDisplayValue(preDisplayValue + \"(\" + value)\r\n        setBracketOpened(true)\r\n      }\r\n      setOperandEntered(true)\r\n      return\r\n    } else if(calculatedBool) {\r\n      setPreDisplayValue(displayValue.toString() + value)\r\n      setCalculatedBool(false)\r\n    } else if(preDisplayValue !== null) {\r\n      setPreDisplayValue(preDisplayValue.toString() + displayValue.toString() + value)\r\n    } else {\r\n      setPreDisplayValue(displayValue.toString() + value)\r\n    }\r\n    setOperandEntered(true)\r\n  }\r\n\r\n  const calculate = () => {\r\n    let calculated = null\r\n    if(bracketOpened) {\r\n      calculated = math.evaluate(calculation.concat(displayValue + \")\"))\r\n      setBracketOpened(false)\r\n    } else {\r\n      calculated = math.evaluate(calculation + displayValue)\r\n    }\r\n\r\n    setDisplayValue(calculated)\r\n    setPreDisplayValue(calculated.toString())\r\n    setCalculatedBool(true)\r\n    return\r\n  }\r\n\r\n  const focusRef = useRef()\r\n\r\n  useEffect(() => {\r\n    focusRef.current.focus()\r\n  })\r\n\r\n  function whatKey(e) {\r\n    const value = e.key\r\n    if(!isNaN(value) || value === \".\") {\r\n      setDisplay(value)\r\n    } else if(value === \"+\" || value === \"-\" || value === \"*\" || value === \"/\") {\r\n      setPreDisplay(value)\r\n    } else if(value === \"Enter\" || value === \"=\") {\r\n      calculate()\r\n    } else if(value === \"Escape\") {\r\n      setDisplayValue(0)\r\n      setOperandEntered(false)\r\n      setPreDisplayValue(null)\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator\" tabIndex=\"0\"\r\n      autoFocus={true} ref={focusRef}\r\n      onBlur={({ target }) => target.focus()}\r\n      onKeyDown={e => whatKey(e)}>\r\n      <div className=\"displays\">\r\n        <div id=\"predisplay\">{preDisplayValue}</div>\r\n        <div id=\"display\">{displayValue}</div>\r\n      </div>\r\n\r\n      <div className=\"numbers-operands\">\r\n        <div className=\"numbers\">\r\n          <button onClick={() => setDisplay(7)} id=\"seven\">7</button>\r\n          <button onClick={() => setDisplay(8)} id=\"eight\">8</button>\r\n          <button onClick={() => setDisplay(9)} id=\"nine\">9</button>\r\n          <button onClick={() => setDisplay(4)} id=\"four\">4</button>\r\n          <button onClick={() => setDisplay(5)} id=\"five\">5</button>\r\n          <button onClick={() => setDisplay(6)} id=\"six\">6</button>\r\n          <button onClick={() => setDisplay(1)} id=\"one\">1</button>\r\n          <button onClick={() => setDisplay(2)} id=\"two\">2</button>\r\n          <button onClick={() => setDisplay(3)} id=\"three\">3</button>\r\n          <button onClick={() => setDisplay(0)} id=\"zero\">0</button>\r\n          <button onClick={() => setDisplay(\".\")} id=\"decimal\">.</button>\r\n        </div>\r\n        <div className=\"operands\">\r\n          <button onClick={() => {\r\n            setDisplayValue(0)\r\n            setOperandEntered(false)\r\n            setPreDisplayValue(null)}} id=\"clear\">AC</button>\r\n          <button onClick={() => setPreDisplay(\"*\")} id=\"multiply\">x</button>\r\n          <button onClick={() => setPreDisplay(\"/\")} id=\"divide\">/</button>\r\n          <button onClick={() => setPreDisplay(\"+\")} id=\"add\">+</button>\r\n          <button onClick={() => setPreDisplay(\"-\")} id=\"subtract\">-</button>\r\n          <button onClick={() => calculate()} id=\"equals\">=</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}